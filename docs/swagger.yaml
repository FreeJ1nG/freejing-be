definitions:
  auth.newUserRequestBody:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  blog.newBlogRequestBody:
    properties:
      content:
        type: string
      title:
        type: string
    type: object
  dbquery.Blog:
    properties:
      content:
        type: string
      create_date:
        type: string
      id:
        type: integer
      title:
        type: string
    type: object
  dbquery.User:
    properties:
      email:
        type: string
      id:
        type: integer
      passwordHash:
        type: string
      username:
        type: string
    type: object
  httpm.Response:
    properties:
      data: {}
      error:
        type: string
      status_code:
        type: integer
      success:
        type: boolean
    type: object
host: api.freejing.com
info:
  contact:
    email: Andrewjeremy12345@gmail.com
    name: Andrew Jeremy
  description: 'This API is a self-made project made with golang, this repository
    can be accessed on: https://github.com/FreeJ1nG/freejing-be'
  title: FreeJinG API
  version: "1.0"
paths:
  /v1/auth:
    post:
      consumes:
      - application/json
      parameters:
      - description: Create new user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.newUserRequestBody'
      produces:
      - application/json
      responses:
        "201":
          description: User has been created
          schema:
            allOf:
            - $ref: '#/definitions/httpm.Response'
            - properties:
                data:
                  $ref: '#/definitions/dbquery.User'
              type: object
      summary: Create new user
      tags:
      - user
  /v1/auth/{username}:
    delete:
      responses:
        "204":
          description: User has been deleted
      summary: Delete user with a certain username
      tags:
      - user
    put:
      consumes:
      - application/json
      parameters:
      - description: Update user with a certain username
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.newUserRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: User has been updated
          schema:
            allOf:
            - $ref: '#/definitions/httpm.Response'
            - properties:
                data:
                  $ref: '#/definitions/dbquery.User'
              type: object
      summary: Update user with a certain username
      tags:
      - user
  /v1/blogs:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: Blogs retrieved
          schema:
            items:
              allOf:
              - $ref: '#/definitions/httpm.Response'
              - properties:
                  data:
                    items:
                      $ref: '#/definitions/dbquery.Blog'
                    type: array
                type: object
            type: array
      summary: Get blog posts
      tags:
      - blog
    post:
      consumes:
      - application/json
      parameters:
      - description: Create Blog Post
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/blog.newBlogRequestBody'
      produces:
      - application/json
      responses:
        "201":
          description: Blog has been created
          schema:
            allOf:
            - $ref: '#/definitions/httpm.Response'
            - properties:
                data:
                  $ref: '#/definitions/dbquery.Blog'
              type: object
      summary: Create new blog post
      tags:
      - blog
  /v1/blogs/{id}:
    delete:
      responses:
        "204":
          description: Blog has been deleted
      summary: Delete blog post with a certain id
      tags:
      - blog
    get:
      produces:
      - application/json
      responses:
        "200":
          description: Blog has been found
          schema:
            allOf:
            - $ref: '#/definitions/httpm.Response'
            - properties:
                data:
                  $ref: '#/definitions/dbquery.Blog'
              type: object
      summary: Get blog post with a certain id
      tags:
      - blog
    put:
      consumes:
      - application/json
      parameters:
      - description: Update Blog Post
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/blog.newBlogRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: Blog has been updated
          schema:
            allOf:
            - $ref: '#/definitions/httpm.Response'
            - properties:
                data:
                  $ref: '#/definitions/dbquery.Blog'
              type: object
      summary: Update blog post with a certain id
      tags:
      - blog
  /v1/user/{username}:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: User has been found
          schema:
            allOf:
            - $ref: '#/definitions/httpm.Response'
            - properties:
                data:
                  $ref: '#/definitions/dbquery.User'
              type: object
      summary: Get user with a certain username
      tags:
      - user
swagger: "2.0"
